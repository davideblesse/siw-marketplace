PROJECT STRUCTURE :
main
├── java/
│   └── it/
│       └── uniroma3/
│           └── marketplace/
│               ├── MarketplaceApplication.java
│               ├── authentication/
│               │   ├── AuthConfiguration.java
│               │   └── SecurityBeansConfig.java
│               ├── controller/
│               │   ├── AnnuncioController.java
│               │   ├── HomeController.java
│               │   ├── LoginController.java
│               │   ├── RegisterController.java
│               │   └── UserController.java
│               ├── costanti/
│               │   └── Categoria.java
│               ├── model/
│               │   ├── Annuncio.java
│               │   ├── Commento.java
│               │   ├── Credentials.java
│               │   ├── ImageEntity.java
│               │   └── User.java
│               ├── repository/
│               │   ├── AnnuncioRepository.java
│               │   ├── CommentoRepository.java
│               │   ├── CredentialsRepository.java
│               │   └── UserRepository.java
│               └── service/
│                   ├── AnnuncioService.java
│                   ├── CredentialsService.java
│                   └── UserService.java
└── resources/
    ├── application.properties
    ├── import.sql
    ├── static/
    │   ├── css/
    │   │   ├── annunci.css
    │   │   ├── annuncio.css
    │   │   ├── layout.css
    │   │   ├── login.css
    │   │   ├── profile.css
    │   │   └── register.css
    │   └── images/
    │       ├── Amore_Ai_Tempi_1.jpg
    │       ├── Amore_Ai_Tempi_2.jpg
    │       ├── Cent_Anni_1.jpg
    │       ├── Cent_Anni_2.jpg
    │       ├── Speaker_1.jpg
    │       ├── Speaker_2.jpg
    │       ├── maglietta_1.jpg
    │       ├── maglietta_2.jpg
    │       ├── placeholder.jpg
    │       ├── powerbank_1.jpg
    │       └── powerbank_2.jpg
    └── templates/
        ├── annunci.html
        ├── annuncio.html
        ├── error.html
        ├── home.html
        ├── login.html
        ├── register.html
        └── user/
            ├── annunci.html
            ├── annuncio-form.html
            ├── annuncio.html
            └── profile.html


SELECTED FILES:
- java/it/uniroma3/marketplace/MarketplaceApplication.java
- java/it/uniroma3/marketplace/authentication/AuthConfiguration.java
- java/it/uniroma3/marketplace/authentication/SecurityBeansConfig.java
- java/it/uniroma3/marketplace/controller/AnnuncioController.java
- java/it/uniroma3/marketplace/controller/HomeController.java
- java/it/uniroma3/marketplace/controller/LoginController.java
- java/it/uniroma3/marketplace/controller/RegisterController.java
- java/it/uniroma3/marketplace/controller/UserController.java
- java/it/uniroma3/marketplace/costanti/Categoria.java
- java/it/uniroma3/marketplace/model/Annuncio.java
- java/it/uniroma3/marketplace/model/Commento.java
- java/it/uniroma3/marketplace/model/Credentials.java
- java/it/uniroma3/marketplace/model/ImageEntity.java
- java/it/uniroma3/marketplace/model/User.java
- java/it/uniroma3/marketplace/repository/AnnuncioRepository.java
- java/it/uniroma3/marketplace/repository/CommentoRepository.java
- java/it/uniroma3/marketplace/repository/CredentialsRepository.java
- java/it/uniroma3/marketplace/repository/UserRepository.java
- java/it/uniroma3/marketplace/service/AnnuncioService.java
- java/it/uniroma3/marketplace/service/CredentialsService.java
- java/it/uniroma3/marketplace/service/UserService.java
- resources/application.properties
- resources/import.sql
- resources/static/css/annunci.css
- resources/static/css/annuncio.css
- resources/static/css/layout.css
- resources/static/css/login.css
- resources/static/css/profile.css
- resources/static/css/register.css
- resources/static/images/Amore_Ai_Tempi_1.jpg
- resources/static/images/Amore_Ai_Tempi_2.jpg
- resources/static/images/Cent_Anni_1.jpg
- resources/static/images/Cent_Anni_2.jpg
- resources/static/images/Speaker_1.jpg
- resources/static/images/Speaker_2.jpg
- resources/static/images/maglietta_1.jpg
- resources/static/images/maglietta_2.jpg
- resources/static/images/placeholder.jpg
- resources/static/images/powerbank_1.jpg
- resources/static/images/powerbank_2.jpg
- resources/templates/annunci.html
- resources/templates/annuncio.html
- resources/templates/error.html
- resources/templates/home.html
- resources/templates/login.html
- resources/templates/register.html
- resources/templates/user/annunci.html
- resources/templates/user/annuncio-form.html
- resources/templates/user/annuncio.html
- resources/templates/user/profile.html

CONTENT OF SELECTED FILES:

--- java/it/uniroma3/marketplace/MarketplaceApplication.java ---
package it.uniroma3.marketplace;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class MarketplaceApplication {

	public static void main(String[] args) {
		SpringApplication.run(MarketplaceApplication.class, args);
	}

}


--- java/it/uniroma3/marketplace/authentication/AuthConfiguration.java ---
package it.uniroma3.marketplace.authentication;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import static org.springframework.security.config.Customizer.withDefaults;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.web.SecurityFilterChain;

import static it.uniroma3.marketplace.model.Credentials.ADMIN_ROLE;
import static it.uniroma3.marketplace.model.Credentials.DEFAULT_ROLE;
import it.uniroma3.marketplace.service.CredentialsService;

@Configuration
@EnableWebSecurity
public class AuthConfiguration {
	
	@Autowired
	private DataSource dataSource;
	
	@Autowired
	private CredentialsService credentialsService;

	@Autowired
	public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
		auth.jdbcAuthentication().dataSource(dataSource)
				.authoritiesByUsernameQuery("SELECT username, role from credentials WHERE username=?")
				.usersByUsernameQuery("SELECT username, password, 1 as enabled FROM credentials WHERE username=?");
	}


	@Bean
	protected SecurityFilterChain configure(final HttpSecurity httpSecurity) throws Exception {
        httpSecurity.csrf(withDefaults()).cors(cors -> cors.disable()).authorizeHttpRequests(requests -> requests
                // Consentiti a tutti (occasionali)
                .requestMatchers(HttpMethod.GET, "/", "/index", "/annunci/**",
                        "/login", "/register", "/css/**", "/images/**", "favicon.ico")
                .permitAll().requestMatchers(HttpMethod.POST, "/register", "/login", "/images/**")
                .permitAll()

                // Solo ADMIN_ROLE
                .requestMatchers("/admin/**").hasAuthority(ADMIN_ROLE)

                // Solo DEFAULT_ROLE
                .requestMatchers("/user/**").hasAuthority(DEFAULT_ROLE)

                // Qualunque altra richiesta: autenticazione
                .anyRequest().authenticated()).formLogin(login -> login.loginPage("/login") // Pagina di login di default
                // per tutti
                .loginProcessingUrl("/login") // URL di submit form login user
                .usernameParameter("username").passwordParameter("pwd")
                .successHandler((request, response, authentication) -> {
                    // Success handler custom: redirect in base al ruolo
                    var principal = authentication.getPrincipal();
                    // Recupero id utente dal Principal
                    Long idUtente = null;
                    String username = null;
                    if (principal instanceof org.springframework.security.core.userdetails.UserDetails userDetails) {
                        // Ottieni ID utente qui secondo la tua implementazione
                        // Esempio: CredentialsService -> trova utente per username
                        username = userDetails.getUsername();
                        idUtente = this.credentialsService.findByUsername(username).getUser().getId();

                    }
                    boolean isAdmin = this.credentialsService.findByUsername(username).getRole().equals(ADMIN_ROLE);
                    if (isAdmin) {
                        // Se ADMIN, redirect operatore (sostituisci idUtente)
                        response.sendRedirect(idUtente != null ? "/admin/annunci" : "/login");
                    } else {
                        // Se Utente, redirect utente (sostituisci idUtente)
                        response.sendRedirect(idUtente != null ? "/user/annunci" : "/login");
                    }
                }).failureUrl("/login?error=true").permitAll()).logout(logout -> logout.logoutUrl("/logout")
                .logoutSuccessUrl("/").invalidateHttpSession(true).deleteCookies("JSESSIONID")
                .clearAuthentication(true).permitAll());
		return httpSecurity.build();
	}
}


--- java/it/uniroma3/marketplace/authentication/SecurityBeansConfig.java ---
package it.uniroma3.marketplace.authentication;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
public class SecurityBeansConfig {
    @Bean
    public PasswordEncoder passwordEncoder(){
        return new BCryptPasswordEncoder();
    }
}


--- java/it/uniroma3/marketplace/controller/AnnuncioController.java ---
package it.uniroma3.marketplace.controller;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import it.uniroma3.marketplace.costanti.Categoria;
import it.uniroma3.marketplace.model.Annuncio;
import it.uniroma3.marketplace.model.ImageEntity;
import it.uniroma3.marketplace.model.User;
import it.uniroma3.marketplace.service.AnnuncioService;
import it.uniroma3.marketplace.service.UserService;
import jakarta.validation.Valid;

@Controller
public class AnnuncioController {

    @Autowired
    private AnnuncioService annuncioService;

    @Autowired
    private UserService userService;

    // --- public list / detail ---

    @GetMapping("/annunci")
    public String listAnnunci(
            @RequestParam(required=false) Categoria categoria,
            @RequestParam(required=false) String nome,
            Model model) {

        List<Annuncio> annunci;
        if (nome != null && !nome.isBlank()) {
            annunci = annuncioService.findByCategoriaAndNome(categoria, nome);
        } else if (categoria != null) {
            annunci = annuncioService.findByCategoria(categoria);
        } else {
            annunci = annuncioService.findAll();
        }

        model.addAttribute("annunci", annunci);
        model.addAttribute("categorie", Categoria.values());
        model.addAttribute("categoriaSelezionata", categoria);
        model.addAttribute("nomeSelezionato", nome);
        return "annunci";
    }

    @GetMapping("/annunci/{id}")
    public String showAnnuncio(@PathVariable Long id, Model model) {
        Annuncio annuncio = annuncioService.findById(id);
        if (annuncio == null) return "error";
        model.addAttribute("annuncio", annuncio);
        return "annuncio";
    }

    // --- user’s own annunci list & detail ---

    @GetMapping("/user/annunci")
    public String listUserAnnunci(
            @RequestParam(required=false) Categoria categoria,
            @RequestParam(required=false) String nome,
            Model model) {

        User current = userService.getCurrentUser();
        if (current == null) return "redirect:/login";

        List<Annuncio> annunci;
        if (nome != null && !nome.isBlank()) {
            annunci = annuncioService.findByCategoriaAndNome(categoria, nome);
        } else if (categoria != null) {
            annunci = annuncioService.findByCategoria(categoria);
        } else {
            annunci = annuncioService.findAll();
        }

        model.addAttribute("user", current);
        model.addAttribute("annunci", annunci);
        model.addAttribute("categorie", Categoria.values());
        model.addAttribute("categoriaSelezionata", categoria);
        model.addAttribute("nomeSelezionato", nome);
        return "user/annunci";
    }

    @GetMapping("/user/annunci/{id}")
    public String showUserAnnuncio(@PathVariable Long id, Model model) {
        User current = userService.getCurrentUser();
        if (current == null) return "redirect:/login";

        Annuncio annuncio = annuncioService.findById(id);
        if (annuncio == null) return "error";

        model.addAttribute("user", current);
        model.addAttribute("annuncio", annuncio);
        return "user/annuncio";
    }

    // --- delete ---

    @PostMapping("/user/annunci/{id}/delete")
    public String delete(@PathVariable Long id) {
        User current = userService.getCurrentUser();
        if (current == null) return "redirect:/login";

        annuncioService.deleteById(id);
        return "redirect:/user/" + current.getId();
    }

    // --- create form & handler ---

    @GetMapping("/user/annunci/new")
    public String newUserAnnuncioForm(Model model) {
        User current = userService.getCurrentUser();
        if (current == null) return "redirect:/login";

        model.addAttribute("user", current);
        model.addAttribute("annuncio", new Annuncio());
        model.addAttribute("allCats", Categoria.values());
        return "user/annuncio-form";
    }

    @PostMapping("/annunci")
    public String createAnnuncio(
            @ModelAttribute Annuncio annuncio,
            @RequestParam("imageFiles") MultipartFile[] imageFiles
    ) throws IOException {
        User current = userService.getCurrentUser();
        if (current == null) return "redirect:/login";

        // set the owner
        annuncio.setOwner(current);

        // process images
        List<ImageEntity> images = new ArrayList<>();
        for (MultipartFile file : imageFiles) {
            if (!file.isEmpty()) {
                Path target = Paths
                    .get("src/main/resources/static/images/")
                    .resolve(file.getOriginalFilename());
                Files.copy(file.getInputStream(),
                           target,
                           StandardCopyOption.REPLACE_EXISTING);
                images.add(new ImageEntity(file.getOriginalFilename()));
            }
        }
        annuncio.setImages(images);

        annuncioService.save(annuncio);
        return "redirect:/annunci/" + annuncio.getId();
    }

    // --- edit form & handler ---

    @GetMapping("/user/annunci/{id}/edit")
    public String editUserAnnuncioForm(@PathVariable Long id, Model model) {
        User current = userService.getCurrentUser();
        if (current == null) return "redirect:/login";

        Annuncio existing = annuncioService.findById(id);
        if (existing == null) return "error";

        model.addAttribute("user", current);
        model.addAttribute("annuncio", existing);
        model.addAttribute("allCats", Categoria.values());
        return "user/annuncio-form";
    }

    @PostMapping("/annunci/{id}")
    public String updateAnnuncio(
            @PathVariable Long id,
            @ModelAttribute Annuncio annuncio,
            @RequestParam("imageFiles") MultipartFile[] imageFiles
    ) throws IOException {
        User current = userService.getCurrentUser();
        if (current == null) return "redirect:/login";

        Annuncio existing = annuncioService.findById(id);
        if (existing == null) return "error";

        // copy editable fields
        existing.setTitle(annuncio.getTitle());
        existing.setPrice(annuncio.getPrice());
        existing.setCategoria(annuncio.getCategoria());

        // replace images
        List<ImageEntity> images = new ArrayList<>();
        for (MultipartFile file : imageFiles) {
            if (!file.isEmpty()) {
                Path target = Paths
                    .get("src/main/resources/static/images/")
                    .resolve(file.getOriginalFilename());
                Files.copy(file.getInputStream(),
                           target,
                           StandardCopyOption.REPLACE_EXISTING);
                images.add(new ImageEntity(file.getOriginalFilename()));
            }
        }
        existing.setImages(images);

        annuncioService.save(existing);
        return "redirect:/annunci/" + existing.getId();
    }
}
ice.delete(a);                       // aggiungi metodo delete nel service
            return "redirect:/user/annunci";
        }
}


--- java/it/uniroma3/marketplace/controller/HomeController.java ---
package it.uniroma3.marketplace.controller;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class HomeController {

    @GetMapping("/")
    public String home(){
        return "redirect:/annunci";
    }
}


--- java/it/uniroma3/marketplace/controller/LoginController.java ---
package it.uniroma3.marketplace.controller;

import java.util.Optional;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
public class LoginController {

    @GetMapping("/login")
    public String login(@RequestParam Optional<String> error, Model model) {
        model.addAttribute("loginError", error.isPresent());
        return "login";
    }
}



--- java/it/uniroma3/marketplace/controller/RegisterController.java ---
package it.uniroma3.marketplace.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import jakarta.validation.Valid;

import it.uniroma3.marketplace.model.Credentials;
import it.uniroma3.marketplace.model.User;
import it.uniroma3.marketplace.service.CredentialsService;

@Controller
public class RegisterController {

    @Autowired
    private CredentialsService credentialsService;

    /**
     * Mostra la pagina di registrazione.
     */
    @GetMapping("/register")
	public String showRegister(Model model) {
		model.addAttribute("user", new User());
		model.addAttribute("credentials", new Credentials());
		return "register";
	}


    /**
     * Processa il form di registrazione.
    */
    @PostMapping("/register")
    public String registerUser(
        @Valid @ModelAttribute("credentials") Credentials credentials,
        BindingResult binding
    ) {
        if (credentialsService.existsByUsername(credentials.getUsername())) {
            binding.rejectValue("username","error.credentials","Username già esistente");
        }
        if (binding.hasErrors()) return "register";

        // role e user già collegati
        credentials.setRole(Credentials.DEFAULT_ROLE);
        credentialsService.save(credentials);
        return "redirect:/login?registered";
    }

}



--- java/it/uniroma3/marketplace/controller/UserController.java ---
package it.uniroma3.marketplace.controller;

import java.util.Objects;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;

import it.uniroma3.marketplace.model.User;
import it.uniroma3.marketplace.service.CredentialsService;
import it.uniroma3.marketplace.service.UserService;

@Controller
public class UserController {

    @Autowired
    private UserService userService;
    
    @Autowired
    private CredentialsService credentialsService;

    private boolean verifyId(Long idUrl, Long idUser) {
		return idUser!= null && Objects.equals(idUrl, idUser);
	}

    @GetMapping("/user/{id}")
    public String showProfile(@PathVariable("id") Long id,
            @RequestParam(value="showPasswordModal", required = false, defaultValue = "false") boolean showPasswordModal,
            Model model) {
        User user = userService.getCurrentUser();
        if (!verifyId(id, user.getId())){
            return "redirect:/login";
        }

        
        model.addAttribute("showPasswordModal", showPasswordModal);
        model.addAttribute("user", user);
        return "user/profile";
    }

    @GetMapping("/admin/{id}")
    public String showAdminProfile(@PathVariable("id") Long id,
            @RequestParam(value="showPasswordModal", required = false, defaultValue = "false") boolean showPasswordModal,
            Model model) {
        User user = userService.getCurrentUser();
        if (!verifyId(id, user.getId())){
            return "redirect:/login";
        }
        model.addAttribute("showPasswordModal", showPasswordModal);
        model.addAttribute("user", user);
        return "admin/profile";
    }
}


--- java/it/uniroma3/marketplace/costanti/Categoria.java ---
package it.uniroma3.marketplace.costanti;

public enum Categoria {
    ELETTRONICA,
    ABBIGLIAMENTO,
    LIBRI,
    MOTORI
}


--- java/it/uniroma3/marketplace/model/Annuncio.java ---
package it.uniroma3.marketplace.model;

import java.util.List;
import java.util.Objects;

import it.uniroma3.marketplace.costanti.Categoria;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;

@Entity
public class Annuncio {
    @Id 
    @GeneratedValue(strategy=GenerationType.AUTO)
    private Long id;

    @NotEmpty
    @NotNull
    private String title;

    @NotNull
    @Min(0)
    private Integer price;

    @NotNull
    @Enumerated(EnumType.STRING)
    private Categoria categoria;

    @OneToMany(cascade=CascadeType.ALL)
    private List<ImageEntity> images;

    @ManyToOne(optional = false)
    private User owner;

    @OneToMany(
        mappedBy="annuncio",
        cascade=CascadeType.ALL,
        orphanRemoval=true
        )
    private List<Commento> commenti;


    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public Integer getPrice() {
        return price;
    }

    public void setPrice(Integer price) {
        this.price = price;
    }
    
    public List<ImageEntity> getImages() {
        return images;
    }

    public void setImages(List<ImageEntity> images) {
        this.images = images;
    }

    @Override
    public int hashCode() {
        int hash = 3;
        hash = 97 * hash + Objects.hashCode(this.id);
        hash = 97 * hash + Objects.hashCode(this.title);
        hash = 97 * hash + Objects.hashCode(this.price);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Annuncio other = (Annuncio) obj;
        if (!Objects.equals(this.title, other.title)) {
            return false;
        }
        if (!Objects.equals(this.id, other.id)) {
            return false;
        }
        return Objects.equals(this.price, other.price);
    }

    public List<Commento> getCommenti() {
        return commenti;
    }

    public void setCommenti(List<Commento> commenti) {
        this.commenti = commenti;
    }

    public Categoria getCategoria() {
        return categoria;
    }

    public void setCategoria(Categoria categoria) {
        this.categoria = categoria;
    }

    public User getOwner() {
        return owner;
    }

    public void setOwner(User owner) {
        this.owner = owner;
    }


}


--- java/it/uniroma3/marketplace/model/Commento.java ---
package it.uniroma3.marketplace.model;
import java.util.Objects;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.ManyToOne;
import jakarta.validation.constraints.NotEmpty;

@Entity
public class Commento {
    
    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    private Long id;

    @NotEmpty
    private String text;

    @NotEmpty
    private String offer;

    @ManyToOne
    @NotEmpty
    private User user;

    @ManyToOne
    @NotEmpty
    private Annuncio annuncio;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getText() {
        return text;
    }

    public void setText(String text) {
        this.text = text;
    }

    public String getOffer() {
        return offer;
    }

    public void setOffer(String offer) {
        this.offer = offer;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public Annuncio getAnnuncio() {
        return annuncio;
    }

    public void setAnnuncio(Annuncio annuncio) {
        this.annuncio = annuncio;
    }

    @Override
    public int hashCode() {
        int hash = 5;
        hash = 71 * hash + Objects.hashCode(this.id);
        hash = 71 * hash + Objects.hashCode(this.user);
        hash = 71 * hash + Objects.hashCode(this.annuncio);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Commento other = (Commento) obj;
        if (!Objects.equals(this.id, other.id)) {
            return false;
        }
        if (!Objects.equals(this.user, other.user)) {
            return false;
        }
        return Objects.equals(this.annuncio, other.annuncio);
    }
}


--- java/it/uniroma3/marketplace/model/Credentials.java ---
package it.uniroma3.marketplace.model;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToOne;
import jakarta.validation.constraints.NotEmpty;
import jakarta.persistence.CascadeType;

@Entity
public class Credentials {
    public static final String DEFAULT_ROLE = "DEFAULT";
    public static final String ADMIN_ROLE = "ADMIN";

    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    private Long id;
    @NotEmpty
    private String username;
    @NotEmpty
    private String password;

    private String role;

    @OneToOne(cascade = CascadeType.ALL)  
    private User user;

    public Long getId() {
        return id;
    }
    public void setId(Long id) {
        this.id = id;
    }
    public String getUsername() {
        return username;
    }
    public void setUsername(String username) {
        this.username = username;
    }
    public String getPassword() {
        return password;
    }
    public void setPassword(String password) {
        this.password = password;
    }
    public String getRole() {
        return role;
    }
    public void setRole(String role) {
        this.role = role;
    }
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((id == null) ? 0 : id.hashCode());
        result = prime * result + ((username == null) ? 0 : username.hashCode());
        result = prime * result + ((password == null) ? 0 : password.hashCode());
        result = prime * result + ((role == null) ? 0 : role.hashCode());
        return result;
    }
    
    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Credentials other = (Credentials) obj;
        if (id == null) {
            if (other.id != null)
                return false;
        } else if (!id.equals(other.id))
            return false;
        if (username == null) {
            if (other.username != null)
                return false;
        } else if (!username.equals(other.username))
            return false;
        if (password == null) {
            if (other.password != null)
                return false;
        } else if (!password.equals(other.password))
            return false;
        if (role == null) {
            if (other.role != null)
                return false;
        } else if (!role.equals(other.role))
            return false;
        return true;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }
}


--- java/it/uniroma3/marketplace/model/ImageEntity.java ---
package it.uniroma3.marketplace.model;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.validation.constraints.NotBlank;

@Entity
public class ImageEntity {

    public ImageEntity() {}

    public ImageEntity(String name) {
        this.name = name;
    }

    @Id
    @GeneratedValue
    private Long id;

    @NotBlank
    private String name;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return "/images/" + name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((id == null) ? 0 : id.hashCode());
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        ImageEntity other = (ImageEntity) obj;
        if (id == null) {
            if (other.id != null)
                return false;
        } else if (!id.equals(other.id))
            return false;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }
}


--- java/it/uniroma3/marketplace/model/User.java ---
package it.uniroma3.marketplace.model;

import java.util.List;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotEmpty;

@Entity
@Table(name = "users")
public class User {
    
    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    private Long id;

    @NotEmpty
	private String name;
	
	@NotEmpty
	private String surname;
	
	@NotEmpty
	private String email;

    @OneToMany(mappedBy = "user", 
               cascade = CascadeType.ALL,
               orphanRemoval=true)
    private List<Commento> commenti;

    @OneToMany(mappedBy = "owner", 
               cascade = CascadeType.ALL,
               orphanRemoval=true)
    private List<Annuncio> annunci;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getSurname() {
        return surname;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((id == null) ? 0 : id.hashCode());
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        result = prime * result + ((surname == null) ? 0 : surname.hashCode());
        result = prime * result + ((email == null) ? 0 : email.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        User other = (User) obj;
        if (id == null) {
            if (other.id != null)
                return false;
        } else if (!id.equals(other.id))
            return false;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        if (surname == null) {
            if (other.surname != null)
                return false;
        } else if (!surname.equals(other.surname))
            return false;
        if (email == null) {
            if (other.email != null)
                return false;
        } else if (!email.equals(other.email))
            return false;
        return true;
    }

    public void setSurname(String surname) {
        this.surname = surname;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public List<Commento> getCommenti() {
        return commenti;
    }

    public void setCommenti(List<Commento> commenti) {
        this.commenti = commenti;
    }

    public List<Annuncio> getAnnunci() {
        return annunci;
    }

    public void setAnnunci(List<Annuncio> annunci) {
        this.annunci = annunci;
    }

    

}


--- java/it/uniroma3/marketplace/repository/AnnuncioRepository.java ---
package it.uniroma3.marketplace.repository;
import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;

import it.uniroma3.marketplace.costanti.Categoria;
import it.uniroma3.marketplace.model.Annuncio;
import it.uniroma3.marketplace.model.User;

public interface AnnuncioRepository extends JpaRepository<Annuncio, Long>{
    List<Annuncio> findByOwner(User owner);
    List<Annuncio> findByCategoria(Categoria categoria);
    List<Annuncio> findByCategoriaAndTitleContainingIgnoreCase(Categoria categoria, String name);
    
}



--- java/it/uniroma3/marketplace/repository/CommentoRepository.java ---
package it.uniroma3.marketplace.repository;

import org.springframework.data.jpa.repository.JpaRepository;

import it.uniroma3.marketplace.model.Commento;

public interface CommentoRepository extends JpaRepository<Commento, Long>{

}


--- java/it/uniroma3/marketplace/repository/CredentialsRepository.java ---
package it.uniroma3.marketplace.repository;
import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;

import it.uniroma3.marketplace.model.Credentials;

public interface CredentialsRepository extends JpaRepository<Credentials, Long>{
    public Optional<Credentials> findByUsername (String username);
    public boolean existsByUsername (String username);
}


--- java/it/uniroma3/marketplace/repository/UserRepository.java ---
package it.uniroma3.marketplace.repository;

import org.springframework.data.jpa.repository.JpaRepository;

import it.uniroma3.marketplace.model.User;

public interface UserRepository extends JpaRepository<User, Long>{

}


--- java/it/uniroma3/marketplace/service/AnnuncioService.java ---
package it.uniroma3.marketplace.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import it.uniroma3.marketplace.costanti.Categoria;
import it.uniroma3.marketplace.model.Annuncio;
import it.uniroma3.marketplace.model.User;
import it.uniroma3.marketplace.repository.AnnuncioRepository;

@Service
public class AnnuncioService {
    
    @Autowired
    private AnnuncioRepository annuncioRepo;
    
    public List<Annuncio> findAll() {
        return (List<Annuncio>) this.annuncioRepo.findAll();
    }

    public List<Annuncio> findByCategoria(Categoria categoria){
        return (List<Annuncio>) annuncioRepo.findByCategoria(categoria);
    }

    public List<Annuncio> findByCategoriaAndNome(Categoria categoria, String nome){
        return annuncioRepo.findByCategoriaAndTitleContainingIgnoreCase(categoria, nome);
    }

    public Annuncio findById(Long id){
        return this.annuncioRepo.findById(id).orElse(null);
    }
    
    public List<Annuncio> findByOwner(User user){
        return annuncioRepo.findByOwner(user);
    }


    public void save(Annuncio annuncio){
        this.annuncioRepo.save(annuncio);
    }

    public void delete(Annuncio annuncio) {
        this.annuncioRepo.delete(annuncio);
    }

    public void deleteById(Long id) {
        this.annuncioRepo.deleteById(id);
    }
}

--- java/it/uniroma3/marketplace/service/CredentialsService.java ---
package it.uniroma3.marketplace.service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import it.uniroma3.marketplace.model.Credentials;
import static it.uniroma3.marketplace.model.Credentials.DEFAULT_ROLE;
import it.uniroma3.marketplace.model.User;
import it.uniroma3.marketplace.repository.CredentialsRepository;
import jakarta.validation.Valid;

@Service
public class CredentialsService {
    @Autowired
    private CredentialsRepository credentialsRepo;

    @Autowired
    private PasswordEncoder passwordEncoder;

    public Credentials findByUsername(String username){
        return this.credentialsRepo.findByUsername(username).orElse(null);
    }

    public boolean existsByUsername(String username){
        return this.credentialsRepo.existsByUsername(username);
    }

    public void save(@Valid Credentials credentials) {
        credentials.setRole(DEFAULT_ROLE);
        credentials.setPassword(this.passwordEncoder.encode(credentials.getPassword()));
        credentialsRepo.save(credentials);
    }

    public User getCurrentUser(){
        UserDetails userDetails = (UserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        return this.findByUsername(userDetails.getUsername()).getUser();
    }
    
}


--- java/it/uniroma3/marketplace/service/UserService.java ---
package it.uniroma3.marketplace.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import it.uniroma3.marketplace.model.User;
import it.uniroma3.marketplace.repository.UserRepository;
import jakarta.validation.Valid;

@Service
public class UserService {
    @Autowired
    private UserRepository userRepository;
    
    @Autowired
    private CredentialsService credentialsService;

    public User getCurrentUser(){
        return this.credentialsService.getCurrentUser();
    }

    public User findById(Long id) {
        return userRepository.findById(id).orElse(null);
    }

    public void saveUser(@Valid User user){
        this.userRepository.save(user);
    }
}


--- resources/application.properties ---
#==================================
# = Application
#==================================
spring.application.name=siwmarketplace

#==================================
# = Datasource
#==================================
spring.jpa.database=POSTGRESQL
spring.jpa.show-sql=true
logging.level.org.hibernate.SQL=debug
logging.level.org.hibernate.type.descriptor.sql=trace

# ricrea lo schema a ogni avvio in dev
spring.jpa.hibernate.ddl-auto=create

# esegue import.sql sempre
spring.sql.init.mode=ALWAYS

spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://localhost:5432/siwmarketplace
spring.datasource.username=postgres
spring.datasource.password=postgres

spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

#==================================
# = Web server
#==================================
server.port=8080
server.error.whitelabel.enabled=false
server.error.include-stacktrace=always

#==================================
# = Thymeleaf
#==================================
spring.thymeleaf.enabled=true
spring.thymeleaf.check-template-location=true
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.servlet.content-type=text/html
spring.thymeleaf.cache=false
spring.thymeleaf.encoding=UTF-8

spring.web.resources.static-locations=classpath:/static/

#==================================
# = Messages
#==================================
spring.messages.basename=messages/messages
spring.messages.encoding=UTF-8

#==================================
# = Formattazione date/ora
#==================================
spring.mvc.format.date=dd/MM/yyyy
spring.mvc.format.date-time=dd/MM/yyyy HH:mm

#==================================
# = Upload di file (immagini)
#==================================
spring.servlet.multipart.max-file-size=20MB
spring.servlet.multipart.max-request-size=20MB
upload.dir=./src/main/resources/static/images

#==================================
# = Sicurezza
#==================================
# eventuali proprietà di CORS o personalizzazioni Security vanno aggiunte qui



--- resources/import.sql ---
-- immagini
INSERT INTO image_entity (id, name) VALUES (1, 'Amore_Ai_Tempi_1.jpg');
INSERT INTO image_entity (id, name) VALUES (2, 'Amore_Ai_Tempi_2.jpg');
INSERT INTO image_entity (id, name) VALUES (3, 'Cent_Anni_1.jpg');
INSERT INTO image_entity (id, name) VALUES (4, 'Cent_Anni_2.jpg');
INSERT INTO image_entity (id, name) VALUES (5, 'maglietta_1.jpg');
INSERT INTO image_entity (id, name) VALUES (6, 'maglietta_2.jpg');
INSERT INTO image_entity (id, name) VALUES (7, 'Speaker_1.jpg');
INSERT INTO image_entity (id, name) VALUES (8, 'Speaker_2.jpg');
INSERT INTO image_entity (id, name) VALUES (9, 'powerbank_1.jpg');
INSERT INTO image_entity (id, name) VALUES (10, 'powerbank_2.jpg');

-- utenti
INSERT INTO users (id, name, surname, email) VALUES (1, 'Mario', 'Rossi', 'mariorossi@example.com');
INSERT INTO users (id, name, surname, email) VALUES (2, 'Luigi', 'Bianchi', 'luigibianchi@example.com');

-- annunci
INSERT INTO annuncio (id, title, price, categoria, owner_id) VALUES (4, 'Amore ai Tempi del Colera', 20, 'LIBRI', 2);
INSERT INTO annuncio (id, title, price, categoria, owner_id) VALUES (5, 'Cent''Anni di Solitudine', 18, 'LIBRI', 2);
INSERT INTO annuncio (id, title, price, categoria, owner_id) VALUES (6, 'Maglietta Vintage Taglia M', 10, 'ABBIGLIAMENTO', 1);
INSERT INTO annuncio (id, title, price, categoria, owner_id) VALUES (7, 'Speaker Bluetooth Portatile', 25, 'ELETTRONICA', 1);
INSERT INTO annuncio (id, title, price, categoria, owner_id) VALUES (8, 'Powerbank 10000mAh', 30, 'ELETTRONICA', 2);


-- commenti
INSERT INTO commento (id, user_id, annuncio_id, text, offer) VALUES (3, 1, 8, 'Sto cercando un powerbank affidabile per i miei viaggi: questo ha una buona capacità?', 30);
INSERT INTO commento (id, user_id, annuncio_id, text, offer) VALUES (4, 2, 6, 'La maglietta mi piace molto, è disponibile in taglia M o L?', 20);



-- credenziali
INSERT INTO credentials (id, user_id, username, password, role) VALUES (1, 1, 'user', '$2a$12$5prWEhDvUP7OdU9cFa2/quN2spDBCBiKXyWTXXQyA1N2wkHZAh32S', 'DEFAULT');

-- relazioni many-to-many
INSERT INTO annuncio_images (annuncio_id, images_id) VALUES (4, 1);
INSERT INTO annuncio_images (annuncio_id, images_id) VALUES (4, 2);
INSERT INTO annuncio_images (annuncio_id, images_id) VALUES (5, 3);
INSERT INTO annuncio_images (annuncio_id, images_id) VALUES (5, 4);
INSERT INTO annuncio_images (annuncio_id, images_id) VALUES (6, 5);
INSERT INTO annuncio_images (annuncio_id, images_id) VALUES (6, 6);
INSERT INTO annuncio_images (annuncio_id, images_id) VALUES (7, 7);
INSERT INTO annuncio_images (annuncio_id, images_id) VALUES (7, 8);
INSERT INTO annuncio_images (annuncio_id, images_id) VALUES (8, 9);
INSERT INTO annuncio_images (annuncio_id, images_id) VALUES (8, 10);


-- riallineamento delle sequence
SELECT setval('image_entity_seq',   (SELECT MAX(id) FROM image_entity));
SELECT setval('users_seq',          (SELECT MAX(id) FROM users));
SELECT setval('annuncio_seq',       (SELECT MAX(id) FROM annuncio));
SELECT setval('commento_seq',       (SELECT MAX(id) FROM commento));
SELECT setval('credentials_seq',    (SELECT MAX(id) FROM credentials));


--- resources/static/css/annunci.css ---
/* annunci.css */

/* --- Form di filtraggio --- */
.filter-form {
  max-width: 1000px;
  margin: 2rem auto;
  padding: 0 1rem;
  display: flex;
  flex-wrap: wrap;
  gap: 1rem;
  align-items: center;
}

.filter-form label {
  font-family: 'Open Sans', sans-serif;
  font-size: 0.9rem;
}

.filter-form input[type="text"],
.filter-form select {
  flex: 1 1 200px;
  padding: 0.5rem;
  font-size: 1rem;
  border: 1px solid #ccc;
  border-radius: 4px;
  outline: none;
  transition: border-color 0.2s;
}

.filter-form input[type="text"]:focus,
.filter-form select:focus {
  border-color: #333;
}

.filter-form button {
  padding: 0.5rem 1rem;
  font-family: 'Merriweather', serif;
  font-size: 1rem;
  background-color: #333;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.2s;
}

.filter-form button:hover {
  background-color: #555;
}

/* --- Contenitore principale degli annunci --- */
.annunci {
  max-width: 1200px;
  margin: 0 auto;
  padding: 1rem;
}

.annunci__empty {
  font-family: 'Open Sans', sans-serif;
  color: #666;
  text-align: center;
  font-style: italic;
  margin-top: 2rem;
}

/* --- Griglia di card --- */
.annunci-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 1.5rem;
  margin-top: 1.5rem;
}

/* --- Card singola --- */
.annuncio-card {
  background-color: #fafafa;
  border: 1px solid #e0e0e0;
  border-radius: 4px;
  overflow: hidden;
  display: flex;
  flex-direction: column;
  transition: box-shadow 0.2s;
}

.annuncio-card:hover {
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

/* --- Immagine di copertina --- */
.annuncio-cover-wrapper {
  position: relative;
  width: 100%;
  padding-bottom: 66.66%; /* 3:2 ratio */
  background: #eee;
  overflow: hidden;
}

.annuncio-cover-wrapper img {
  position: absolute;
  top: 0; left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
}

/* --- Sezione info --- */
.annuncio-info {
  padding: 1rem;
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

.annuncio-title {
  font-family: 'Merriweather', serif;
  font-size: 1.2rem;
  margin: 0 0 0.5rem;
  color: #333;
}

.annuncio-price {
  font-family: 'Open Sans', sans-serif;
  font-size: 1rem;
  font-weight: bold;
  margin: 0 0 1rem;
  color: #333;
}

.view-details-link {
  font-family: 'Open Sans', sans-serif;
  text-decoration: none;
  font-weight: bold;
  color: #ff8f00;
  transition: color 0.2s;
}

.view-details-link:hover {
  color: #e57c00;
}

--- resources/static/css/annuncio.css ---
/* annuncio.css */

/* Contenitore principale */
.details-container {
  max-width: 1000px;
  margin: 2rem auto;
  padding: 0 1rem;
}

/* TOP SECTION: immagini + info */
.annuncio-top {
  display: flex;
  gap: 2rem;
  align-items: flex-start;
  margin-bottom: 3rem;
}
@media (max-width: 768px) {
  .annuncio-top {
    flex-direction: column;
  }
}

/* IMMAGINI */
.images-container {
  flex: 1;
}
.images-grid {
  display: flex;
  gap: 0.5rem;
  overflow-x: auto;
  padding-bottom: 0.5rem;
}
.image-item {
  flex: 0 0 25%;        /* ad esempio 4 immagini in orizzontale */
  aspect-ratio: 1 / 1;  /* rapporto 1:1 */
  overflow: hidden;
  border-radius: 4px;
}

.annuncio-img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.no-images-placeholder {
  font-family: 'Open Sans', sans-serif;
  color: #666;
  text-align: center;
  padding: 2rem;
}

/* INFORMAZIONI ANNUNCIO */
.annuncio-info {
  flex: 2;
  display: flex;
  flex-direction: column;
  gap: 1rem;
}
.annuncio-title {
  font-family: 'Merriweather', serif;
  font-size: 2rem;
  margin: 0;
  color: #333;
}
.annuncio-prezzo {
  font-family: 'Open Sans', sans-serif;
  font-size: 1.4rem;
  font-weight: bold;
  color: #ff8f00;
}
.info-section {
  font-family: 'Open Sans', sans-serif;
}
.info-section strong {
  font-family: 'Merriweather', serif;
  color: #333;
}
.info-section span {
  margin-left: 0.5rem;
}

/* SECTION COMMENTI */
.comments-section {
  border-top: 1px solid #e0e0e0;
  padding-top: 2rem;
}
.comments-section h2 {
  font-family: 'Merriweather', serif;
  font-size: 1.6rem;
  margin-bottom: 1rem;
}
.commenti-list {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}
.commento-item {
  border-top: 1px solid #e0e0e0;
  padding-top: 1rem;
}
.commento-user {
  font-family: 'Merriweather', serif;
  margin: 0 0 0.5rem;
}
.commento-text,
.commento-offerta {
  font-family: 'Open Sans', sans-serif;
  margin: 0.25rem 0;
}
.commento-offerta {
  font-style: italic;
  color: #555;
}
.commento-empty {
  font-family: 'Open Sans', sans-serif;
  color: #666;
  font-style: italic;
  margin-bottom: 1rem;
}

/* INVITO AL LOGIN */
.login-to-review {
  background: #fff8e1;
  border: 1px solid #ffe082;
  padding: 0.75rem 1rem;
  border-radius: 4px;
  font-family: 'Open Sans', sans-serif;
  margin-top: 1.5rem;
}
.login-to-review a {
  color: #ff8f00;
  text-decoration: none;
  font-weight: bold;
}
.login-to-review a:hover {
  text-decoration: underline;
}


--- resources/static/css/layout.css ---
/* layout.css */

/* Reset some defaults */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* HEADER */
.header {
  background-color: #333;
  color: #fff;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.navbar {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0.5rem 1rem;
}

.navbar-content {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.navbar-links-group {
  display: flex;
  align-items: center;
}

.navbar-Title {
  font-family: 'Merriweather', serif;
  font-size: 1.5rem;
  margin-right: 2rem;
}


.navbar-link {
  display: inline-block;
  padding: 0.5rem 1rem;
  color: #ddd;
  text-decoration: none;
  transition: color 0.2s ease;
}

button.navbar-link {
  /* remove default button styles */
  background: none;
  border: none;
  /* preserve your link padding & sizing */
  display: inline-block;
  padding: 0.5rem 1rem;
  /* grab the same font/color/hover you already have */
  font-family: inherit;
  color: inherit;
  text-decoration: none;
  transition: color 0.2s ease;
  cursor: pointer;
}

/* hover state */
.navbar-link:hover {
  color: #fff;
}

/* active page state */
.navbar-link.active {
  color: #fff;
  border-bottom: 2px solid #fff;
}
/* FOOTER */
.footer {
  background-color: #f5f5f5;
  color: #555;
  border-top: 1px solid #e0e0e0;
}

.footer-content {
  max-width: 1200px;
  margin: 0 auto;
  padding: 1rem;
  text-align: center;
  font-family: 'Open Sans', sans-serif;
  font-size: 0.9rem;
}


/* make our inline logout form sit in the link-group */
.navbar-links-group form {
  display: inline; 
  margin: 0;     /* reset any browser form margins */
}

/* style <button class="navbar-link"> exactly like your links */
button.navbar-link {
  /* inherit all the .navbar-link settings */
  display: inline-block;
  padding: 0.5rem 1rem;
  color: #ddd;
  text-decoration: none;
  font-family: inherit;
  font-size: inherit;
  transition: color 0.2s ease;
  cursor: pointer;

  /* reset the button defaults */
  background: none;
  border: none;
  outline: none;
}

/* hover/active states just like your <a> links */
button.navbar-link:hover,
button.navbar-link.active {
  color: #fff;
}


--- resources/static/css/login.css ---
/* 1) Scope generale SOLO all’interno del login */
.login-body {
  display: flex;
  flex-direction: column;
  min-height: 100vh;      /* body full-height */
}

/* 2) L’area centrale del login prende tutto lo spazio rimanente */
.login-page {
  flex: 1;                /* tra header e footer */
  display: flex;
  align-items: center;
  justify-content: center;
  background: #f2f2f2;
  padding: 2rem 0;
}

/* 3) Reset box-sizing e margin/padding SOLO qui */
.login-page * {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

/* 4) Stili del contenitore bianco */
.login-container {
  background: #fff;
  padding: 2rem;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0,0,0,0.1);
  width: 100%;
  max-width: 360px;
}

/* 5) Stili del form */
.login-form h2 {
  margin-bottom: 1rem;
  text-align: center;
  color: #333;
}
.input-group {
  margin-bottom: 1rem;
}
.input-group label {
  display: block;
  margin-bottom: 0.25rem;
  color: #555;
}
.input-group input {
  width: 100%;
  padding: 0.5rem;
  border: 1px solid #ccc;
  border-radius: 4px;
}
button[type="submit"] {
  width: 100%;
  padding: 0.75rem;
  background-color: #007bff;
  border: none;
  border-radius: 4px;
  color: #fff;
  font-size: 1rem;
  cursor: pointer;
  transition: background-color 0.2s ease-in-out;
}
button[type="submit"]:hover {
  background-color: #0056b3;
}
.error {
  margin-top: 0.5rem;
  color: #c00;
  text-align: center;
  font-size: 0.9rem;
}
.success {
  margin-top: 0.5rem;
  color: #080;
  text-align: center;
  font-size: 0.9rem;
}

.register-prompt {
  margin-top: 1rem;
  text-align: center;
  font-size: 0.9rem;
  color: #555;
}
.register-prompt .register-link {
  color: #007bff;
  text-decoration: none;
}
.register-prompt .register-link:hover {
  text-decoration: underline;
}


--- resources/static/css/profile.css ---
/* profile.css */

/* Main container */
.profile-main {
  max-width: 800px;
  margin: 2rem auto;
  padding: 0 1rem;
  font-family: 'Open Sans', sans-serif;
}

/* User info box */
.user-info {
  background-color: #fafafa;
  border: 1px solid #e0e0e0;
  border-radius: 4px;
  padding: 1rem;
  margin-bottom: 2rem;
}
.user-info h2 {
  font-family: 'Merriweather', serif;
  font-size: 1.8rem;
  margin-bottom: 0.5rem;
}
.user-info p {
  margin: 0.25rem 0;
}

/* Annunci section */
.user-annunci h2 {
  font-family: 'Merriweather', serif;
  font-size: 1.5rem;
  margin-bottom: 1rem;
}

/* Grid of cards */
.annunci-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1rem;
}

.annuncio-thumb {
  width: 100%;
  height: 150px;
  overflow: hidden;
  border-radius: 4px;
  margin-bottom: 0.5rem;
}
.annuncio-thumb img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  display: block;
}

/* Annuncio card tweaks (you may already have these) */
.annuncio-card {
  background-color: #fafafa;
  border: 1px solid #e0e0e0;
  border-radius: 4px;
  padding: 1rem;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}
.annuncio-card h3 {
  margin: 0.5rem 0;
}
.annuncio-price {
  font-weight: bold;
  margin-bottom: 0.5rem;
}
.annuncio-link {
  align-self: flex-end;
  text-decoration: none;
  font-weight: bold;
  transition: color 0.2s;
}
.annuncio-link:hover {
  color: #555;
}


--- resources/static/css/register.css ---
.register-body {
  display: flex;
  flex-direction: column;
  min-height: 100vh;      /* body full-height */
}
/* 2) L’area centrale del register prende tutto lo spazio rimanente */
.register-page {
  flex: 1;                /* tra header e footer */
  display: flex;
  align-items: center;
  justify-content: center;
  background: #f2f2f2;
  padding: 2rem 0;
}

/* 3) Reset box-sizing e margin/padding SOLO qui */
.register-page * {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

/* 4) Stili del contenitore bianco */
.register-container {
  background: #fff;
  padding: 2rem;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0,0,0,0.1);
  width: 100%;
  max-width: 360px;
}

.register-form h2 {
  margin-bottom: 1rem;
  text-align: center;
  color: #333;
}

.login-form h2 {
  margin-bottom: 1rem;
  text-align: center;
  color: #333;
}
.input-group {
  margin-bottom: 1rem;
}
.input-group label {
  display: block;
  margin-bottom: 0.25rem;
  color: #555;
}
.input-group input {
  width: 100%;
  padding: 0.5rem;
  border: 1px solid #ccc;
  border-radius: 4px;
}

button[type="submit"] {
  width: 100%;
  padding: 0.75rem;
  background-color: #007bff;
  border: none;
  border-radius: 4px;
  color: #fff;
  font-size: 1rem;
  cursor: pointer;
  transition: background-color 0.2s ease-in-out;
}
button[type="submit"]:hover {
  background-color: #0056b3;
}

.login-prompt {
  margin-top: 1rem;
  text-align: center;
  font-size: 0.9rem;
  color: #555;
}
.login-prompt .register-link {
  color: #007bff;
  text-decoration: none;
}
.login-prompt .register-link:hover {
  text-decoration: underline;
}

--- resources/static/images/Amore_Ai_Tempi_1.jpg ---
Error reading file resources/static/images/Amore_Ai_Tempi_1.jpg: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

--- resources/static/images/Amore_Ai_Tempi_2.jpg ---
Error reading file resources/static/images/Amore_Ai_Tempi_2.jpg: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

--- resources/static/images/Cent_Anni_1.jpg ---
Error reading file resources/static/images/Cent_Anni_1.jpg: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

--- resources/static/images/Cent_Anni_2.jpg ---
Error reading file resources/static/images/Cent_Anni_2.jpg: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

--- resources/static/images/Speaker_1.jpg ---
Error reading file resources/static/images/Speaker_1.jpg: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

--- resources/static/images/Speaker_2.jpg ---
Error reading file resources/static/images/Speaker_2.jpg: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

--- resources/static/images/maglietta_1.jpg ---
Error reading file resources/static/images/maglietta_1.jpg: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

--- resources/static/images/maglietta_2.jpg ---
Error reading file resources/static/images/maglietta_2.jpg: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

--- resources/static/images/placeholder.jpg ---
Error reading file resources/static/images/placeholder.jpg: 'utf-8' codec can't decode byte 0xba in position 4: invalid start byte

--- resources/static/images/powerbank_1.jpg ---
Error reading file resources/static/images/powerbank_1.jpg: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

--- resources/static/images/powerbank_2.jpg ---
Error reading file resources/static/images/powerbank_2.jpg: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

--- resources/templates/annunci.html ---
<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Annunci</title>
    <link rel="stylesheet" href="/css/annunci.css" />
    <link rel="stylesheet" th:href="@{/css/layout.css}" />
  </head>
  <body class="annunci-page">
    <header class="header">
      <nav class="navbar">
        <div class="navbar-content">
          <div class="navbar-links-group">
            <h1 class="navbar-Title">SiwMarketplace</h1>
          </div>
          <div class="navbar-links-group">
            <a th:href="@{/}" class="navbar-link">Home</a>
            <a th:href="@{/annunci}" class="navbar-link active">Annunci</a>
            <a th:href="@{/login}" class="navbar-link">Accedi</a>
          </div>
        </div>
      </nav>
    </header>

    <form th:action="@{/annunci}" method="get" class="filter-form">
      <label for="nome">Cerca per nome:</label>
      <input
        type="text"
        id="nome"
        name="nome"
        th:value="${nomeSelezionato}"
        placeholder="Titolo contiene…"
      />

      <label for="categoria">Filtra per categoria:</label>
      <select
        id="categoria"
        name="categoria"
        th:value="${categoriaSelezionata}"
      >
        <option
          value=""
          th:text="'Tutte'"
          th:selected="${categoriaSelezionata} == null"
        ></option>
        <option
          th:each="c : ${categorie}"
          th:value="${c}"
          th:text="${#strings.capitalize(c.name().toLowerCase())}"
          th:selected="${c} == ${categoriaSelezionata}"
        ></option>
      </select>

      <button type="submit">Filtra</button>
    </form>

    <main class="annunci">
      <!-- Messaggio quando non ci sono annunci -->
      <p th:if="${#lists.isEmpty(annunci)}" class="annunci__empty">
        Nessun annuncio disponibile
      </p>

      <!-- Griglia annunci -->
      <div th:unless="${#lists.isEmpty(annunci)}" class="annunci-grid">
        <div th:each="annuncio : ${annunci}" class="annuncio-card">
          <!-- Copertina -->
          <div class="annuncio-cover-wrapper">
            <img
              th:if="${annuncio.images != null and !#lists.isEmpty(annuncio.images)}"
              th:src="${annuncio.images[0].name}"
              th:alt="'Immagine di ' + ${annuncio.title}"
            />
            <img
              th:unless="${annuncio.images != null and !#lists.isEmpty(annuncio.images)}"
              src="/images/placeholder.jpg"
              alt="Nessuna immagine"
            />
          </div>

          <!-- Info annuncio -->
          <div class="annuncio-info">
            <h2 class="annuncio-title" th:text="${annuncio.title}">
              Titolo annuncio
            </h2>
            <p class="annuncio-price" th:text="${annuncio.price} + ' €'">
              0,00 €
            </p>
            <a
              class="view-details-link"
              th:href="@{'/annunci/' + ${annuncio.id}}"
            >
              Dettagli
            </a>
          </div>
        </div>
      </div>
    </main>

    <footer class="footer">
      <div class="footer-content">
        <p>Siwmarketplace - Vendi e compra quello che vuoi</p>
      </div>
    </footer>
  </body>
</html>


--- resources/templates/annuncio.html ---
<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title th:text="${annuncio.title} + ' – SiwMarketplace'">Dettaglio Annuncio</title>
    <link rel="stylesheet" th:href="@{/css/layout.css}" />
    <link rel="stylesheet" th:href="@{/css/annuncio.css}" />
  </head>
  <body class="annuncio-page">
    <header class="header">
      <nav class="navbar">
        <div class="navbar-content">
          <div class="navbar-links-group">
            <h1 class="navbar-Title">SiwMarketplace</h1>
          </div>
          <div class="navbar-links-group">
            <a th:href="@{/}" class="navbar-link">Home</a>
            <a th:href="@{/annunci}" class="navbar-link active">Annunci</a>
            <a th:href="@{/login}" class="navbar-link">Accedi</a>
          </div>
        </div>
      </nav>
    </header>

    <main class="details-container">
      <!-- TOP: immagini + descrizione -->
      <section class="annuncio-top">
        <div class="images-container">
          <div class="images-grid" th:if="${not #lists.isEmpty(annuncio.images)}">
            <div th:each="img : ${annuncio.images}" class="image-item">
              <img
                th:src="${img.name}"
                alt="Foto di [[${annuncio.title}]]"
                class="annuncio-img"
              />
            </div>
          </div>
          <div class="no-images-placeholder" th:if="${#lists.isEmpty(annuncio.images)}">
            Nessuna immagine disponibile
          </div>
        </div>
        <div class="annuncio-info">
          <h1 class="annuncio-title" th:text="${annuncio.title}">Titolo Annuncio</h1>
          <div class="annuncio-prezzo" th:text="${annuncio.price} + ' €'">0,00 €</div>
          <div class="info-section">
            <strong>Venditore:</strong>
            <span th:text="${annuncio.owner.name + ' ' + annuncio.owner.surname}">
              Nome Venditore
            </span>
          </div>
        </div>
      </section>

      <!-- BOTTOM: commenti -->
      <section class="comments-section">
        <h2>Commenti</h2>
        <div class="commenti-list" th:if="${not #lists.isEmpty(annuncio.commenti)}">
          <div th:each="commento : ${annuncio.commenti}" class="commento-item">
            <h4 class="commento-user"
                th:text="${commento.user.name + ' ' + commento.user.surname}">
              Nome Utente
            </h4>
            <p class="commento-text" th:text="${commento.text}">
              Testo commento
            </p>
            <p class="commento-offerta" th:text="'Offre: ' + ${commento.offer}">
              Offerta
            </p>
          </div>
        </div>
        <div class="commento-empty" th:if="${#lists.isEmpty(annuncio.commenti)}">
          Nessun commento
        </div>
        <div class="login-to-review">
          Per scrivere un commento, <a th:href="@{/login}">accedi qui</a>.
        </div>
      </section>
    </main>

    <footer class="footer">
      <div class="footer-content">
        <p>Siwmarketplace – Vendi e compra quello che vuoi</p>
      </div>
    </footer>
  </body>
</html>


--- resources/templates/error.html ---
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Error</title>
</head>
<body>
    <h1>Si è verificato un errore</h1>
</body>
</html>

--- resources/templates/home.html ---
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HomePage</title>
    <link rel="stylesheet" th:href="@{/css/header.css}">
    <link rel="stylesheet" th:href="@{/css/footer.css}">
</head>
<body>


    <h1>HomePage</h1>


</body>
</html>

--- resources/templates/login.html ---
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head><title>Login</title></head>
<body>
  <h1>Accedi</h1>
  <form th:action="@{/login}" method="post">
    <div><label>Username: <input name="username"/></label></div>
    <div><label>Password: <input type="password" name="pwd"/></label></div>
    <button type="submit">Login</button>
    <div th:if="${param.error}">Credenziali non valide</div>

    <p class="register-prompt"> Non hai un account?
      <a href="/register" class="register-link">Registrati qui</a>
    </p>
  </form>
</body>
</html>


--- resources/templates/register.html ---
<form th:action="@{/register}" th:object="${credentials}" method="post">
  <div>
    <label>Username: <input th:field="*{username}" /></label>
    <div th:if="${#fields.hasErrors('username')}" th:errors="*{username}"></div>
  </div>
  <div>
    <label>Password: <input type="password" th:field="*{password}" /></label>
    <div th:if="${#fields.hasErrors('password')}" th:errors="*{password}"></div>
  </div>
  <div>
    <label>Nome: <input th:field="*{user.name}" /></label>
  </div>
  <div>
    <label>Cognome: <input th:field="*{user.surname}" /></label>
  </div>
  <div>
    <label>Email: <input th:field="*{user.email}" /></label>
  </div>
  <button type="submit">Registrati</button>
</form>


--- resources/templates/user/annunci.html ---
<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Annunci</title>
    <link rel="stylesheet" href="/css/annunci.css" />
    <link rel="stylesheet" th:href="@{/css/layout.css}" />
  </head>
  <body class="annunci-page">
    <header class="header">
      <nav class="navbar">
        <div class="navbar-content">
          <div class="navbar-links-group">
            <h1 class="navbar-Title">SiwMarketplace</h1>
          </div>
          <div class="navbar-links-group">
            <a th:href="@{/}" class="navbar-link">Home</a>
            <a th:href="@{/user/annunci}" class="navbar-link active">Annunci</a>
            <a th:href="@{'/user/' + ${user.id}}" class="navbar-link">Profilo</a>
            <form th:action="@{/logout}" method="post">
              <input
                type="hidden"
                th:name="${_csrf.parameterName}"
                th:value="${_csrf.token}"
              />
              <button type="submit" class="navbar-link">Esci</button>
            </form>
          </div>
        </div>
      </nav>
    </header>

    <form th:action="@{/annunci}" method="get" class="filter-form">
      <label for="nome">Cerca per nome:</label>
      <input
        type="text"
        id="nome"
        name="nome"
        th:value="${nomeSelezionato}"
        placeholder="Titolo contiene…"
      />

      <label for="categoria">Filtra per categoria:</label>
      <select
        id="categoria"
        name="categoria"
        th:value="${categoriaSelezionata}"
      >
        <option
          value=""
          th:text="'Tutte'"
          th:selected="${categoriaSelezionata} == null"
        ></option>
        <option
          th:each="c : ${categorie}"
          th:value="${c}"
          th:text="${#strings.capitalize(c.name().toLowerCase())}"
          th:selected="${c} == ${categoriaSelezionata}"
        ></option>
      </select>

      <button type="submit">Filtra</button>
    </form>

    <main class="annunci">
      <!-- Messaggio quando non ci sono annunci -->
      <p th:if="${#lists.isEmpty(annunci)}" class="annunci__empty">
        Nessun annuncio disponibile
      </p>

      <!-- Griglia annunci -->
      <div th:unless="${#lists.isEmpty(annunci)}" class="annunci-grid">
        <div th:each="annuncio : ${annunci}" class="annuncio-card">
          <!-- Copertina -->
          <div class="annuncio-cover-wrapper">
            <img
              th:if="${annuncio.images != null and !#lists.isEmpty(annuncio.images)}"
              th:src="${annuncio.images[0].name}"
              th:alt="'Immagine di ' + ${annuncio.title}"
            />
            <img
              th:unless="${annuncio.images != null and !#lists.isEmpty(annuncio.images)}"
              src="/images/placeholder.jpg"
              alt="Nessuna immagine"
            />
          </div>

          <!-- Info annuncio -->
          <div class="annuncio-info">
            <h2 class="annuncio-title" th:text="${annuncio.title}">
              Titolo annuncio
            </h2>
            <p class="annuncio-price" th:text="${annuncio.price} + ' €'">
              0,00 €
            </p>
            <a
              class="view-details-link"
              th:href="@{'/user/annunci/' + ${annuncio.id}}"
            >
              Dettagli
            </a>
          </div>
        </div>
      </div>
    </main>

    <footer class="footer">
      <div class="footer-content">
        <p>Siwmarketplace - Vendi e compra quello che vuoi</p>
      </div>
    </footer>
  </body>
</html>


--- resources/templates/user/annuncio-form.html ---
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
  <head>
    <title>Annuncio</title>
  </head>

  <body>
    <header class="header">
      <nav class="navbar">
        <div class="navbar-content">
          <div class="navbar-links-group">
            <h1 class="navbar-Title">SiwMarketplace</h1>
          </div>
          <div class="navbar-links-group">
            <a th:href="@{/}" class="navbar-link">Home</a>
            <a th:href="@{/user/annunci}" class="navbar-link">Annunci</a>
            <a th:href="@{'/user/' + ${user.id}}" class="navbar-link active"
              >Profilo</a
            >
            <form th:action="@{/logout}" method="post">
              <input
                type="hidden"
                th:name="${_csrf.parameterName}"
                th:value="${_csrf.token}"
              />
              <button type="submit" class="navbar-link">Esci</button>
            </form>
          </div>
        </div>
      </nav>
    </header>

    <main>
      <h1
        th:text="${annuncio.id == null} ? 'Nuovo Annuncio' : 'Modifica Annuncio'"
      ></h1>

      <form
        th:action="@{${annuncio.id} == null ? '/annunci' : '/annunci/' + ${annuncio.id}}"
        th:object="${annuncio}"
        method="post"
        enctype="multipart/form-data"
      >
        <!-- only include the hidden id on edit -->
        <input type="hidden" th:if="${annuncio.id != null}" th:field="*{id}" />

        <label>
          Titolo:
          <input type="text" th:field="*{title}" /> </label
        ><br />

        <label>
          Prezzo:
          <input type="number" th:field="*{price}" /> </label
        ><br />

        <label>
          Categoria:
          <select th:field="*{categoria}">
            <option
              th:each="c : ${allCats}"
              th:value="${c}"
              th:text="${c}"
            ></option>
          </select> </label
        ><br />

        <label>
          Immagini:
          <input
            type="file"
            name="imageFiles"
            multiple
            accept="image/*"
          /> </label
        ><br />

        <button type="submit">Salva</button>
      </form>
    </main>

    <footer class="footer">
      <div class="footer-content">
        <p>Siwmarketplace - Vendi e compra quello che vuoi</p>
      </div>
    </footer>
  </body>
</html>


--- resources/templates/user/annuncio.html ---
<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title th:text="${annuncio.title} + ' – SiwMarketplace'">
      Dettaglio Annuncio
    </title>
    <link rel="stylesheet" th:href="@{/css/layout.css}" />
    <link rel="stylesheet" th:href="@{/css/annuncio.css}" />
  </head>
  <body class="annuncio-page">
    <header class="header">
      <nav class="navbar">
        <div class="navbar-content">
          <div class="navbar-links-group">
            <h1 class="navbar-Title">SiwMarketplace</h1>
          </div>
          <div class="navbar-links-group">
            <a th:href="@{/}" class="navbar-link">Home</a>
            <a th:href="@{/user/annunci}" class="navbar-link active">Annunci</a>
            <a th:href="@{'/user/' + ${user.id}}" class="navbar-link">Profilo</a>
            <form th:action="@{/logout}" method="post">
              <input
                type="hidden"
                th:name="${_csrf.parameterName}"
                th:value="${_csrf.token}"
              />
              <button type="submit" class="navbar-link">Esci</button>
            </form>
          </div>
        </div>
      </nav>
    </header>

    <main class="details-container">
      <!-- TOP: immagini + descrizione -->
      <section class="annuncio-top">
        <div class="images-container">
          <div
            class="images-grid"
            th:if="${not #lists.isEmpty(annuncio.images)}"
          >
            <div th:each="img : ${annuncio.images}" class="image-item">
              <img
                th:src="${img.name}"
                th:alt="Foto di [[${annuncio.title}]]"
                class="annuncio-img"
              />
            </div>
          </div>
          <div
            class="no-images-placeholder"
            th:if="${#lists.isEmpty(annuncio.images)}"
          >
            Nessuna immagine disponibile
          </div>
        </div>
        <div class="annuncio-info">
          <h1 class="annuncio-title" th:text="${annuncio.title}">
            Titolo Annuncio
          </h1>
          <div class="annuncio-prezzo" th:text="${annuncio.price} + ' €'">
            0,00 €
          </div>
          <div class="info-section">
            <strong>Venditore:</strong>
            <span
              th:text="${annuncio.owner.name + ' ' + annuncio.owner.surname}"
            >
              Nome Venditore
            </span>
          </div>
        </div>
      </section>

      <!-- BOTTOM: commenti -->
      <section class="comments-section">
        <h2>Commenti</h2>
        <div
          class="commenti-list"
          th:if="${not #lists.isEmpty(annuncio.commenti)}"
        >
          <div th:each="commento : ${annuncio.commenti}" class="commento-item">
            <h4
              class="commento-user"
              th:text="${commento.user.name + ' ' + commento.user.surname}"
            >
              Nome Utente
            </h4>
            <p class="commento-text" th:text="${commento.text}">
              Testo commento
            </p>
            <p class="commento-offerta" th:text="'Offre: ' + ${commento.offer}">
              Offerta
            </p>
          </div>
        </div>
        <div
          class="commento-empty"
          th:if="${#lists.isEmpty(annuncio.commenti)}"
        >
          Nessun commento
        </div>
        <div class="login-to-review">
          Per scrivere un commento, <a th:href="@{/login}">accedi qui</a>.
        </div>
      </section>
    </main>

    <footer class="footer">
      <div class="footer-content">
        <p>Siwmarketplace – Vendi e compra quello che vuoi</p>
      </div>
    </footer>
  </body>
</html>


--- resources/templates/user/profile.html ---
<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Il mio profilo</title>
    <link rel="stylesheet" href="/css/profile.css" />
    <link rel="stylesheet" th:href="@{/css/layout.css}" />
  </head>
  <body class="profile-page">
    <header class="header">
      <nav class="navbar">
        <div class="navbar-content">
          <div class="navbar-links-group">
            <h1 class="navbar-Title">SiwMarketplace</h1>
          </div>
          <div class="navbar-links-group">
            <a th:href="@{/}" class="navbar-link">Home</a>
            <a th:href="@{/annunci}" class="navbar-link">Annunci</a>
            <a th:href="@{'/user/' + ${user.id}}" class="navbar-link active"
              >Profilo</a
            >
            <form th:action="@{/logout}" method="post">
              <input
                type="hidden"
                th:name="${_csrf.parameterName}"
                th:value="${_csrf.token}"
              />
              <button type="submit" class="navbar-link">Esci</button>
            </form>
          </div>
        </div>
      </nav>
    </header>

    <main class="profile-main">
      <!-- User info -->
      <section class="user-info">
        <h2 th:text="${user.name + ' ' + user.surname}">Nome Cognome</h2>
        <p>
          <strong>Email:</strong>
          <span th:text="${user.email}">email@example.com</span>
        </p>
      </section>

      <!-- User's Annunci -->
      <section class="user-annunci">
        <h2>I tuoi annunci</h2>
        <p th:if="${#lists.isEmpty(user.annunci)}">
          Non hai pubblicato annunci.
        </p>

        <div th:unless="${#lists.isEmpty(user.annunci)}" class="annunci-grid">
          <div th:each="annuncio : ${user.annunci}" class="annuncio-card">
            <!-- Thumbnail: first image or placeholder -->
            <div class="annuncio-thumb">
              <img
                th:if="${annuncio.images != null and !#lists.isEmpty(annuncio.images)}"
                th:src="${annuncio.images[0].name}"
                th:alt="'Cover di ' + ${annuncio.title}"
              />
              <img
                th:unless="${annuncio.images != null and !#lists.isEmpty(annuncio.images)}"
                src="/images/placeholder.jpg"
                alt="Nessuna immagine"
              />
            </div>

            <h3 th:text="${annuncio.title}">Titolo Annuncio</h3>
            <p class="annuncio-price" th:text="${annuncio.price} + ' €'">
              0,00 €
            </p>
            <a
              th:href="@{'/user/annunci/' + ${annuncio.id}}"
              class="annuncio-link"
              >Dettagli</a
            >
            <form
              th:action="@{'/user/annunci/' + ${annuncio.id} + '/delete'}"
              method="post"
              class="delete-form"
            >
              <input
                type="hidden"
                th:name="${_csrf.parameterName}"
                th:value="${_csrf.token}"
              />
              <button type="submit" class="delete-button">Elimina</button>
            </form>
          </div>
        </div>
      </section>
    </main>

    <footer class="footer">
      <div class="footer-content">
        <p>Siwmarketplace - Vendi e compra quello che vuoi</p>
      </div>
    </footer>
  </body>
</html>
